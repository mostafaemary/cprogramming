/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
#include <stdint.h>
//clock configuration
#define RCC_BASE	0x40021000
#define RCC_APB2ENR	*((volatile unsigned int *)(RCC_BASE+ 0x18))
//GPIOA CONFIGURATION

#define GPIOA_BASE	0x40010800
#define GPIOA_CRL *((volatile unsigned int *)(GPIOA_BASE+ 0x00))
#define GPIOA_CRH *((volatile unsigned int *)(GPIOA_BASE+ 0x04))
#define GPIOA_IDR *((volatile unsigned int *)(GPIOA_BASE+ 0x08))
//GPIOB CONFIGURATION
#define GPIOB_BASE	0x40010C00
#define GPIOB_CRL *((volatile unsigned int *)(GPIOB_BASE+ 0x00))
#define GPIOB_CRH *((volatile unsigned int *)(GPIOB_BASE+ 0x04))
#define GPIOB_ODR *((volatile unsigned int *)(GPIOB_BASE+ 0x0C))
void clock_init(void)
{
	//apb2 clock init
	//GPIOA
	RCC_APB2ENR |=(1<<2);
	//GPIOB
	RCC_APB2ENR |=(1<<3);
}
void gpio_init(void)
{
	GPIOA_CRL=0x0;
	GPIOA_CRH=0x0;
	GPIOB_CRL=0x0;
	GPIOB_CRH=0x0;

	//accessing PA_PIN1_:4 5 6 7
	//CNF1:floating input
	GPIOA_CRL |=(0b01<<6);
	//MODE1:input mode
	GPIOA_CRL &=~(0b11<<4);


	//accessing PA_PIN13_:20 21 22 23
	//CNF13: floating input
	GPIOA_CRH |=(0b01<<22);
	//MODE13:input mode
	GPIOA_CRH &=~(0b11<<20);



	//accessing PB_PIN1_:4 5 6 7
	//CNF1: General purpose output push-pull
	GPIOB_CRL &=~(0b11<<6);
	//MODE1:output mode
	GPIOB_CRL |=(0b01<<4);

	//accessing PB_PIN13_:20 21 22 23
	//CNF13: General purpose output push-pull
	GPIOB_CRH &=~(0b11<22);
	//MODE13:output mode
	GPIOB_CRH |=(0b01<<20);
}
void my_delay(int x)
{
	int i,j;
	for (i=0;i<x;i++)
		for(j=0;j<255;j++);
}
int main(void)
{
	clock_init();
	gpio_init();
	while(1)
	{

	if((GPIOA_IDR &(1<<1)>>1)==0)//button is pressed
	{
		GPIOB_ODR ^=(1<<1);
		while((GPIOA_IDR &(1<<1)>>1)==0);//button is pressed
	}

	// multi pressing
	if((GPIOA_IDR &(1<<13)>>1)==1)//button is pressed
	{
		GPIOB_ODR ^=(1<<13);
	}
	}
	my_delay(1);
}
